package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"cashflow/api/graph/generated"
	"cashflow/models"
	"context"
	"fmt"
)

// CreateBalance is the resolver for the createBalance field.
func (r *mutationResolver) CreateBalance(ctx context.Context, input generated.NewBalance) (*models.Balance, error) {
	return r.TransactionService.WriteBalance(input.Amount, input.Date), nil
}

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input generated.NewTransaction) (*models.Transaction, error) {
	if input.Description == nil {
		return r.TransactionService.WriteTransaction(input.Date, input.Amount, ""), nil
	}
	return r.TransactionService.WriteTransaction(input.Date, input.Amount, *input.Description), nil
}

// CreateTransactions is the resolver for the createTransactions field.
func (r *mutationResolver) CreateTransactions(ctx context.Context, input []*generated.NewTransaction) ([]*models.Transaction, error) {
	results := make([]*models.Transaction, 0)
	for _, transaction := range input {
		if transaction.Description == nil {
			results = append(results, r.TransactionService.WriteTransaction(transaction.Date, transaction.Amount, ""))
		} else {
			results = append(results, r.TransactionService.WriteTransaction(transaction.Date, transaction.Amount, *transaction.Description))
		}
	}

	return results, nil
}

// DeleteTransaction is the resolver for the deleteTransaction field.
func (r *mutationResolver) DeleteTransaction(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteTransaction - deleteTransaction"))
}

// RemoveBalance is the resolver for the removeBalance field.
func (r *mutationResolver) RemoveBalance(ctx context.Context, input generated.NewBalance) (string, error) {
	panic(fmt.Errorf("not implemented: RemoveBalance - removeBalance"))
}

// ListTransactions is the resolver for the listTransactions field.
func (r *queryResolver) ListTransactions(ctx context.Context) ([]*models.ComputedTransaction, error) {
	today := "11/12/2023"
	return r.TransactionService.ListTransactions(&today), nil
}

// ListBalances is the resolver for the listBalances field.
func (r *queryResolver) ListBalances(ctx context.Context) ([]*models.Balance, error) {
	return r.TransactionService.ListBalances(), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
