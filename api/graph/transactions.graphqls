enum Status {
  DONE
  TODO
}

type Transaction {
  id: ID!
  amount: Float!
  date: String!
  description: String
}

type ComputedTransaction {
  id: ID!
  amount: Float!
  date: String!
  description: String
  balance: Float!
  status: Status!
}

input NewTransaction {
  date: String!
  amount: Float!
  recurrency: String
  description: String
}

enum TransactionEditType {
  ALL
  ON_DATE_ONLY
  FROM_DATE
}

input TransactionEditInput {
  id: ID!
  type: TransactionEditType!
  date: String
  amount: Float
  description: String
  recurrency: String
}

# input TransactionDeleteInput {
#   type: TransactionEditType!
# } 

extend type Query {
  listTransactions(from: Date, to: Date): [ComputedTransaction!]!
}

extend type Mutation {
  createTransaction(input: NewTransaction!): ID!
  createTransactions(input: [NewTransaction!]!): [ID!]!

  deleteTransaction(id: ID!): ID! # change id for delete input
  deleteTransactions(ids: [ID!]!): [ID!]!

  editTransaction(input: TransactionEditInput!): ID!
}
